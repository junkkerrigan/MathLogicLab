//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\PropositionalLogicGrammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PropositionalLogicGrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface IPropositionalLogicGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PropositionalLogicGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] PropositionalLogicGrammarParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PropositionalLogicGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] PropositionalLogicGrammarParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PropositionalLogicGrammarParser.result"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResult([NotNull] PropositionalLogicGrammarParser.ResultContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PropositionalLogicGrammarParser.result"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResult([NotNull] PropositionalLogicGrammarParser.ResultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Disjunction</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDisjunction([NotNull] PropositionalLogicGrammarParser.DisjunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Disjunction</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDisjunction([NotNull] PropositionalLogicGrammarParser.DisjunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] PropositionalLogicGrammarParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Literal</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] PropositionalLogicGrammarParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralNegation</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralNegation([NotNull] PropositionalLogicGrammarParser.LiteralNegationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralNegation</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralNegation([NotNull] PropositionalLogicGrammarParser.LiteralNegationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Conjunction</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConjunction([NotNull] PropositionalLogicGrammarParser.ConjunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Conjunction</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConjunction([NotNull] PropositionalLogicGrammarParser.ConjunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Implication</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplication([NotNull] PropositionalLogicGrammarParser.ImplicationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Implication</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplication([NotNull] PropositionalLogicGrammarParser.ImplicationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Parentheses</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParentheses([NotNull] PropositionalLogicGrammarParser.ParenthesesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parentheses</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParentheses([NotNull] PropositionalLogicGrammarParser.ParenthesesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Invalid</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInvalid([NotNull] PropositionalLogicGrammarParser.InvalidContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Invalid</c>
	/// labeled alternative in <see cref="PropositionalLogicGrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInvalid([NotNull] PropositionalLogicGrammarParser.InvalidContext context);
}
